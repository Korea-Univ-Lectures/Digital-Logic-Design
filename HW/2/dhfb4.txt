module logic_design( input [4:0] SW, input CLOCK_50,output reg [0:6] HEX3, HEX1,HEX0);

	parameter Seg8 = 7'b000_0000;
	parameter Seg6 = 7'b010_0000;
	parameter Seg4 = 7'b100_1100;
	parameter Seg2 = 7'b001_0010;
	parameter Seg1 = 7'b100_1111;
	parameter Seg0 = 7'b000_0001;
	
	parameter S0=3'b000;
	parameter S4=3'b001;
	parameter S8=3'b010;
	parameter S12=3'b011;
	parameter S16=3'b100;
	parameter S20=3'b101;
	
	reg [2:0] currentState;
	reg [2:0] nextState;
	
	wire inputPlus;
	wire changState;
	
	wire newClk;
	clock(CLOCK_50, newClk);//NEW CLOCK
	
	assign inputPlus=SW[0]|SW[1]|SW[2]|SW[3];
	assign changState=SW[4]|newClk;
	
	initial
		currentState=S0;
	
	always@(posedge changState)
	begin
		if(SW==5'b10000)
			currentState <= S0;
		else
			currentState <= nextState;
	end
	
	always @(posedge inputPlus)
	begin
	
		if(SW==5'b00001)
		begin
			case(currentState)
			S0:nextState<=S4;
			S4:nextState<=S8;
			S8:nextState<=S12;
			S12:nextState<=S16;
			S16:nextState<=S20;
			S20:nextState<=S20;
			default nextState<=currentState;
		endcase	
		end
		
		else if(SW==5'b00010)
		begin
			case(currentState)
			S0:nextState<=S8;
			S4:nextState<=S12;
			S8:nextState<=S16;
			S12:nextState<=S20;
			S16:nextState<=S20;
			S20:nextState<=S20;
			default nextState<=currentState;
		endcase	
		end
		
		else if(SW==5'b00100)
		begin
			case(currentState)
			S0:nextState<=S12;
			S4:nextState<=S16;
			S8:nextState<=S20;
			S12:nextState<=S20;
			S16:nextState<=S20;
			S20:nextState<=S20;
			default nextState<=currentState;
		endcase	
		end
		
		else if(SW==5'b01000)
		begin
			case(currentState)
			S0:nextState<=S0;
			S4:nextState<=S4;
			S8:nextState<=S0;
			S12:nextState<=S4;
			S16:nextState<=S8;
			S20:nextState<=S12;
			default nextState<=currentState;
		endcase	
		end
		
		else 
		begin
			nextState<=currentState;
		end
	end
	
	always @(*)
	begin
		case(currentState)
			S0:begin HEX3=Seg0; HEX1=Seg0; HEX0=Seg0; end
			S4:begin HEX3=Seg0; HEX1=Seg0; HEX0=Seg4; end
			S8:begin HEX3=Seg1; HEX1=Seg0; HEX0=Seg8; end
			S12:begin HEX3=Seg1; HEX1=Seg1; HEX0=Seg2; end
			S16:begin HEX3=Seg2; HEX1=Seg1; HEX0=Seg6; end
			S20:begin HEX3=Seg2; HEX1=Seg2; HEX0=Seg0; end
			default: begin HEX3=7'b111_1111; HEX1=7'b111_1111; HEX0=7'b111_1111; end
		endcase	
	end
endmodule

module clock(input clk, output newclk);
	reg [25:0]cnt;
	
	always@(posedge clk)
	begin
		cnt <= cnt + 1'b1;
	end
	assign newclk = cnt[24];
endmodule